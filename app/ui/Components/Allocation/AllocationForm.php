<?php

namespace App\UI\Components\Allocation;

use App\Domain\Project\ProjectFacade;
use App\Domain\Project\ProjectFacadeResult;
use App\Domain\ProjectAllocation\AllocationFacade;
use App\Domain\User\UserFacade;
use App\Model\App;
use App\Model\Database\Entity\ProjectAllocation;
use App\Model\Database\EntityManager;
use App\Model\Utils\DateTime;
use App\UI\Components\Base\BaseComponent;
use App\UI\Form\BaseForm;
use Contributte\Translation\Translator;
use Nette\Forms\Controls\Checkbox;
use Nette\Forms\Form;
use Nette\Security\User;
use Nette\Utils\ArrayHash;

class AllocationForm extends BaseComponent
{
	public $onSave;
	public $onCancel;

	private AllocationFacade $allocationFacade;
	private ProjectFacade $projectFacade;
	private UserFacade $userFacade;
	private ?int $allocationId;
	private ?int $projectId;
	private ?int $userId;

	public function __construct(
		AllocationFacade $allocationFacade,
		ProjectFacade    $projectFacade,
		UserFacade       $userFacade,
		User             $user,
		Translator       $translator,
		array            $data,
	)
	{
		$this->allocationFacade = $allocationFacade;
		$this->projectFacade = $projectFacade;
		$this->userFacade = $userFacade;
		$this->user = $user;
		$this->translator = $translator;
		$this->allocationId = $data['allocationId'] ?? null;
		$this->projectId = $data['projectId'] ?? null;
		$this->userId = $data['userId'] ?? null;

		if ($this->allocationId !== null)
		{
			$allocation = $this->allocationFacade->get($this->allocationId);
			$this->projectId = $allocation->getProject()->getId();
		}
	}

	/**
	 * Metoda pro úpravu vykreslení formuláře
	 * Nastavení výchozích hodnot formuláře
	 * @param mixed|null $params
	 * @return void
	 * @throws \Exception
	 */
	public function render(mixed $params = null): void
	{
		bdump($this->allocationId);
		// Nastavení defaultních hodnot formuláře
		if ($this->allocationId !== null)
		{
			$allocation = $this->allocationFacade->get($this->allocationId);

			if ($allocation !== null)
			{

				$defaults = [
					'project_name'    => $allocation->getProject()->getName(),
					'user_name'       => $allocation->getUser()->getFullname(),
					'allocation_xfte' => $allocation->getAllocationFTE(),
					'allocation_fte'  => $allocation->getAllocation(),
					'timespan_from'   => DateTime::from($allocation->getTimespanFrom()),
					'timespan_to'     => DateTime::from($allocation->getTimespanTo()),
					'to_switch'       => $allocation->getTimespanTo() != null,
					'state'           => ProjectAllocation::STATES_IDS[$allocation->getState()],
					'description'     => $allocation->getDescription(),
				];

				$this['form']->setDefaults($defaults);

				$this->projectId = $allocation->getProject()->getId();
				$this->template->project = $allocation->getProject();
			}
		}
		else if ($this->userId !== null && $this->projectId != null)
		{
			$project = $this->projectFacade->get($this->projectId);
			$user = $this->userFacade->get($this->userId);
			$this->template->project = $project;

			$defaults = [
				'project_name' => $project?->getName(),
				'user_name'    => $user?->getFullname(),
			];

			$this['form']->setDefaults($defaults);
		}

		parent::render($params); // TODO: Change the autogenerated stub
	}

	/**
	 * Vytvoření komponenty formuláře
	 * @return BaseForm
	 */
	public function createComponentForm(): BaseForm
	{
		$form = new BaseForm();

		if ($this->allocationId === null)
		{
			$form->addHidden('project_id', $this->projectId);

			$form->addHidden('user_id', $this->userId);
		}
		else
		{
			$form->addHidden('allocation_id', $this->allocationId);
		}

		$form->addText('project_name', "Název projektu")
			->setHtmlAttribute('readonly')
		;

		$form->addText('user_name', "Jméno spolupracovníka")
			->setHtmlAttribute('readonly')
		;

		/** @var Checkbox $inputSwitchCheckbox */
		$inputSwitchCheckbox = $form->addCheckbox('allocation_switch', "Zadat v hodinách týdně");

		$inputSwitchCheckbox
			->setDefaultValue(false)
			->setRequired(false)
			->addCondition(Form::FILLED)
			->addCondition($form::EQUAL, true)
			->toggle("#switch-allocation-input")
		;

		$form->addFloat('allocation_fte', "Alokace (hodin týdně)")
			->addRule(Form::RANGE, "Úvazek musí být v rozsahu <0, 40>", [0, App::FTE])
			->addConditionOn($inputSwitchCheckbox, Form::EQUAL, false)
			->setRequired(true)
		;

		$form->addFloat('allocation_xfte', "Alokace (násobek FTE)")
			->addRule(Form::RANGE, "Úvazek musí být v rozsahu <0, 1>", [0, 1])
			->addConditionOn($inputSwitchCheckbox, Form::EQUAL, true)
			->setRequired(true)
		;

		$form->addDatetime("timespan_from", "Od")
			->setDefaultValue(new DateTime())
			->setHtmlAttribute('class', "form-control")
		;

		$toSwitchCheckbox = $form->addCheckbox("to_switch", "Zadat konec");
		$toSwitchCheckbox->setDefaultValue(false)
			->setRequired(false)
			->addCondition(Form::FILLED)
			->addCondition($form::EQUAL, true)
			->toggle("#timespan-to-switch")
		;

		$form->addDatetime("timespan_to", "Do")
			->setDefaultValue(null)
			->setHtmlAttribute('class', "form-control")
			->addConditionOn($toSwitchCheckbox, Form::EQUAL, true)
			->setRequired(true)
		;

		$translatedStates = [];
		foreach (ProjectAllocation::STATES as $key => $value)
		{
			$translatedStates[$key] = $this->translator->translate("admin.allocation.status." . $value);
		}
		$form->addSelect("state", "Status", $translatedStates);

		$form->addTextArea("description", "Popis");

		$form->addSubmit('submit', 'Uložit');

		$form->onValidate[] = [$this, "onValidate"];
		$form->onSuccess[] = [$this, 'onSuccess'];

		return $form;
	}

	public function onValidate(Form $form, ArrayHash $values)
	{
		$this->transformValues($values);

		if ($values['timespan_from'] >= $values['timespan_to'] && $values['to_switch'] == true)
		{
			$form->addError("Začátek nemůže být po konci");
		}
	}

	public function onSuccess(Form $form, ArrayHash $values)
	{
		$values = $this->transformValues($values);

		if (isset($values['allocation_id']))
		{
			$result = $this->allocationFacade->edit($values);
		}
		else
		{
			$result = $this->allocationFacade->create($values);
		}

		if ($result->isSuccess())
		{
			$this->presenter->flashMessage("Alokace úspěšně uložena.", "success");
		}
		else
		{
			$this->presenter->flashMessage("Při ukládání nastala chyba.", "danger");
		}

		$this->onSave($this, $values);
	}

	public function handleCancel()
	{
		bdump($this->projectId);
		$this->onCancel($this);
	}

	public function transformValues(ArrayHash $values): array
	{
		bdump($values);
		$transformed = [];

		if (empty($values['project_id']))
		{
			$transformed['project_id'] = null;
		}
		else
		{
			$transformed['project_id'] = $values['project_id'];
		}

		if (empty($values['user_id']))
		{
			$transformed['user_id'] = null;
		}
		else
		{
			$transformed['user_id'] = $values['user_id'];
		}

		if (empty($values['allocation_id']))
		{
			$transformed['allocation_id'] = null;
		}
		else
		{
			$transformed['allocation_id'] = $values['allocation_id'];
			$allocation = $this->allocationFacade->get($values['allocation_id']);
			if ($allocation !== null)
			{
				$transformed['project_id'] = $allocation->getProject()->getId();
			}
		}

		if ($values['allocation_switch'] == false)
		{
			$transformed['allocation'] = $values['allocation_fte'];
		}
		else
		{
			$transformed['allocation'] = AllocationFacade::convertFTEToHours($values['allocation_xfte']);
		}

		if (empty($values['timespan_from']))
		{
			$transformed['timespan_from'] = null;
		}
		else
		{
			$transformed['timespan_from'] = new DateTime($values['timespan_from']);
		}

		if ($values['to_switch'] === false)
		{
			$transformed['timespan_to'] = null;
		}
		else
		{
			$transformed['timespan_to'] = new DateTime($values['timespan_to']);
		}

		$transformed['state'] = ProjectAllocation::STATES[$values['state']];

		if (empty($values['description']))
		{
			$transformed['description'] = null;
		}
		else
		{
			$transformed['description'] = $values['description'];
		}

		bdump($transformed);
		return $transformed;
	}

	public function getProjectId(): ?int
	{
		return $this->projectId;
	}
}
